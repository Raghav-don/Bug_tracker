{"ast":null,"code":"var _jsxFileName = \"/Users/hello/Desktop/Projects/bugTracker/Bug_tracker/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// This file defines the AuthContext for managing user authentication state in a React application.\n// It provides a context for user data and functions to log in and log out.\n// It uses localStorage to persist user data across sessions.\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\n// Importing necessary hooks and functions from React to create context and manage state.\n// createContext is used to create a new context object.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component wraps the application and provides authentication state and functions.\n// It initializes the user state from localStorage and provides login and logout functions.\n// The user state is updated whenever the login or logout functions are called, and the changes are\n// persisted to localStorage for session management.\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    localStorage.setItem(\"token\", token);\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n  };\n  return (\n    /*#__PURE__*/\n    // Providing the AuthContext to the children components.\n    // This allows any component within the AuthProvider to access the user state and authentication functions.\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        login,\n        logout\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// useAuth is a custom hook that allows components to access the AuthContext easily.\n// It uses useContext to retrieve the current context value, which includes user data and authentication functions\n_s(AuthProvider, \"zsluLqdR4JFWinGdXeb4JmW+E5E=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","login","userData","token","setItem","stringify","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/hello/Desktop/Projects/bugTracker/Bug_tracker/frontend/src/context/AuthContext.js"],"sourcesContent":["// This file defines the AuthContext for managing user authentication state in a React application.\n// It provides a context for user data and functions to log in and log out.\n// It uses localStorage to persist user data across sessions.\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\n// Importing necessary hooks and functions from React to create context and manage state.\n// createContext is used to create a new context object.\nconst AuthContext = createContext();\n\n// AuthProvider component wraps the application and provides authentication state and functions.\n// It initializes the user state from localStorage and provides login and logout functions.\n// The user state is updated whenever the login or logout functions are called, and the changes are\n// persisted to localStorage for session management.\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    localStorage.setItem(\"token\", token);\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n  };\n\n  return (\n    // Providing the AuthContext to the children components.\n    // This allows any component within the AuthProvider to access the user state and authentication functions.\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// useAuth is a custom hook that allows components to access the AuthContext easily.\n// It uses useContext to retrieve the current context value, which includes user data and authentication functions\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEtE;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACrC,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,IAAI;EACnD,CAAC,CAAC;EAEF,MAAMK,KAAK,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACjCR,OAAO,CAACO,QAAQ,CAAC;IACjBL,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACH,QAAQ,CAAC,CAAC;IACtDL,YAAY,CAACO,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBX,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/BV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED;IAAA;IACE;IACA;IACAlB,OAAA,CAACC,WAAW,CAACkB,QAAQ;MAACC,KAAK,EAAE;QAAEf,IAAI;QAAEO,KAAK;QAAEK;MAAO,CAAE;MAAAd,QAAA,EAClDA;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;AAE3B,CAAC;;AAED;AACA;AAAApB,EAAA,CA5BaF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA6BzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM/B,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC0B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}